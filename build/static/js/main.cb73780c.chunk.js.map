{"version":3,"sources":["Poem.js","Box.js","App.js","index.js"],"names":["Poem","memo","input","useState","setError","isLoaded","setIsLoaded","poem","setPoem","useEffect","fetch","then","res","json","result","lines","words","replace","toLowerCase","split","length","line","i","Math","random","pop","push","reverse","splitLines","italics","arr","level","newArr","randomPunctuation","charAt","getRandomPunctuation","slice","rand","floor","getShuffledArr","error","className","src","randomSeed","alt","userInput","map","Box","setUserInput","generatePoem","setGeneratePoem","truePoem","setTruePoem","setRandomSeed","userPretentiousness","setUserPretentiousness","truePretense","setTruePretense","value","onInput","e","target","updateInputState","type","min","max","onChange","updatePretentiousness","pretense","getLabel","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb73780c.chunk.js","sourcesContent":["import React, { useState, useEffect, memo } from 'react';\r\nimport './Poem.css';\r\n\r\nfunction splitLines(poem){\r\n    poem = poem.replace(/[^A-Za-z0-9\\s!?]/g, '').toLowerCase();\r\n    const words = poem.split(\" \");\r\n    const lines = [];\r\n    while (words.length > 0) {\r\n        let line = '';\r\n        let i = Math.random() * 8;\r\n        while (i > 0 && words.length > 0){\r\n            line = words.pop() + ' ' + line;\r\n            if(line.length > 30) {\r\n                i = -1;\r\n            }\r\n            i--;\r\n        }\r\n        lines.push(line);\r\n    }\r\n    return lines.reverse();\r\n}\r\n\r\nconst getShuffledArr = arr => {\r\n    const newArr = arr.slice()\r\n    for (let i = newArr.length - 1; i > 0; i--) {\r\n        const rand = Math.floor(Math.random() * (i + 1));\r\n        [newArr[i], newArr[rand]] = [newArr[rand], newArr[i]];\r\n    }\r\n    return newArr;\r\n};\r\n\r\nconst getRandomPunctuation = (arr, level) => {\r\n    const newArr = [];\r\n    const randomPunctuation = \"!?,~-;:—…\";\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (Math.random() * 10 < level) {\r\n            newArr.push(arr[i] + randomPunctuation.charAt(Math.random() * randomPunctuation.length - 1));\r\n        } else {\r\n            newArr.push(arr[i]);\r\n        }\r\n    }\r\n    return newArr;\r\n};\r\n\r\nconst Poem = memo((input) => {\r\n    // eslint-disable-next-line\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [poem, setPoem] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(`https://api.quotable.io/random?minLength=10&maxLength=200`)\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n              if(result['statusCode'] === 404) {\r\n                  result['content'] = 'ugh this is way too difficult for a drunk man';\r\n              }\r\n              let lines = splitLines(result['content']);\r\n              if (input.italics > 2) {\r\n                  lines = getRandomPunctuation(lines, input.italics);\r\n                  if (input.italics > 8) {\r\n                    lines = getShuffledArr(lines);\r\n                  }\r\n              }\r\n              setIsLoaded(true);\r\n              setPoem(lines);\r\n            },\r\n            (error) => {\r\n              setIsLoaded(true);\r\n              setError(error);\r\n            }\r\n          )\r\n      }, [input]);\r\n\r\n    return (\r\n        <div className='poem'>\r\n            <div className='image'>\r\n                <img src={`https://picsum.photos/600/600?grayscale&random=${input.randomSeed}`} alt=\"some random thing\"/>\r\n            </div>\r\n            <div className=\"text\">\r\n                <h3>{input.userInput}</h3>\r\n                {isLoaded ? poem.map((line) => {\r\n                    if ((Math.random() * 10) < input.italics) {\r\n                        return (<i><p>{line}</p></i>);\r\n                    } else {\r\n                        return (<p>{line}</p>);\r\n                    }\r\n                }) : 'Loading...'}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Poem;","import React, { useState } from 'react';\r\nimport Poem from './Poem.js'; \r\n\r\nfunction Box () {\r\n    const [userInput, setUserInput] = useState('');\r\n    const [generatePoem, setGeneratePoem] = useState(false);\r\n    const [truePoem, setTruePoem] = useState('');\r\n    const [randomSeed, setRandomSeed] = useState(0);\r\n    const [userPretentiousness, setUserPretentiousness] = useState(1);\r\n    const [truePretense, setTruePretense] = useState(-1);\r\n\r\n    const updateInputState = (e) => {\r\n        if (e.target.value !== userInput){\r\n            setUserInput(e.target.value);\r\n        }\r\n    };\r\n\r\n    const updatePretentiousness = (e) => {\r\n        if (e.target.value !== userPretentiousness){\r\n            setUserPretentiousness(e.target.value);\r\n        }\r\n    };\r\n\r\n    const updateGenerateState = (e) => {\r\n        if (e !== generatePoem){\r\n            setGeneratePoem(e);\r\n        }\r\n        setTruePoem(userInput);\r\n        setTruePretense(userPretentiousness)\r\n        setRandomSeed(Math.random() * 1025);\r\n    };\r\n\r\n    const getLabel = (pretense) => {\r\n        switch(pretense) {\r\n            default:\r\n            case \"0\":\r\n            case \"1\":\r\n            case \"2\":\r\n                return \"Sensible\";\r\n            case \"3\":\r\n            case \"4\":\r\n            case \"5\":\r\n                return \"Silly\";\r\n            case \"6\":\r\n                return \"Whimsical\";\r\n            case \"7\":\r\n                return \"Frivolous\";\r\n            case \"8\":\r\n                return \"Fragrantly Flippant\";\r\n            case \"9\": \r\n                return \"Preposterously Pretentious\";\r\n            case \"10\":\r\n                return \"Literally Ludicrous\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <label>\r\n                    Title:{' '}\r\n                    <input value={userInput} onInput={e => updateInputState(e)}/>\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Pretentiousness:{' '}\r\n                    <input type=\"range\" min=\"0\" max=\"10\" value={userPretentiousness} onChange={e => updatePretentiousness(e)} />\r\n                </label>\r\n                <br />\r\n                {truePretense > -1 ? \"Level: \" + getLabel(userPretentiousness) + \"\\n\": null}\r\n                <input type=\"button\" value=\"Generate!\" onClick={() => updateGenerateState(true)}/>\r\n            </div>\r\n            <br />\r\n            <br />\r\n            {generatePoem && truePoem?.length > 0 ? <Poem userInput={truePoem} randomSeed={randomSeed} italics={truePretense} /> : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Box;","import './App.css';\nimport Box from './Box.js';\n\nfunction App() {\n  return (\n    <div className=\"box\">\n      <div>\n        <h1>Rupi Kaur Generator</h1>\n        <Box/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}